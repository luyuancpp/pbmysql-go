// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.32.0
// 	protoc        v4.25.1
// source: db_base.dbproto

package dbproto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	descriptorpb "google.golang.org/protobuf/types/descriptorpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// flag 的值, 表示本条数据的操作状态
type OPERATE_TYPE int32

const (
	OPERATE_TYPE_OPERATE_NONE          OPERATE_TYPE = 0 //sql none
	OPERATE_TYPE_OPERATE_INSERT        OPERATE_TYPE = 1 //sql insert
	OPERATE_TYPE_OPERATE_UPDATE        OPERATE_TYPE = 2 //sql update
	OPERATE_TYPE_OPERATE_DELETE        OPERATE_TYPE = 3 //sql delete
	OPERATE_TYPE_OPERATE_LOAD          OPERATE_TYPE = 4 //sql load
	OPERATE_TYPE_OPERATE_DELETE_CACHE  OPERATE_TYPE = 5 //cache need delete
	OPERATE_TYPE_OPERATE_REPLACE       OPERATE_TYPE = 6
	OPERATE_TYPE_OPERATE_CALL_PROC     OPERATE_TYPE = 7 // call procedure
	OPERATE_TYPE_OPERATE_DELETE_BACKUP OPERATE_TYPE = 8 //backup it
)

// Enum value maps for OPERATE_TYPE.
var (
	OPERATE_TYPE_name = map[int32]string{
		0: "OPERATE_NONE",
		1: "OPERATE_INSERT",
		2: "OPERATE_UPDATE",
		3: "OPERATE_DELETE",
		4: "OPERATE_LOAD",
		5: "OPERATE_DELETE_CACHE",
		6: "OPERATE_REPLACE",
		7: "OPERATE_CALL_PROC",
		8: "OPERATE_DELETE_BACKUP",
	}
	OPERATE_TYPE_value = map[string]int32{
		"OPERATE_NONE":          0,
		"OPERATE_INSERT":        1,
		"OPERATE_UPDATE":        2,
		"OPERATE_DELETE":        3,
		"OPERATE_LOAD":          4,
		"OPERATE_DELETE_CACHE":  5,
		"OPERATE_REPLACE":       6,
		"OPERATE_CALL_PROC":     7,
		"OPERATE_DELETE_BACKUP": 8,
	}
)

func (x OPERATE_TYPE) Enum() *OPERATE_TYPE {
	p := new(OPERATE_TYPE)
	*p = x
	return p
}

func (x OPERATE_TYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OPERATE_TYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_db_base_proto_enumTypes[0].Descriptor()
}

func (OPERATE_TYPE) Type() protoreflect.EnumType {
	return &file_db_base_proto_enumTypes[0]
}

func (x OPERATE_TYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OPERATE_TYPE.Descriptor instead.
func (OPERATE_TYPE) EnumDescriptor() ([]byte, []int) {
	return file_db_base_proto_rawDescGZIP(), []int{0}
}

type BS_RESULT_TYPE int32

const (
	BS_RESULT_TYPE_BS_RESULT_NONE    BS_RESULT_TYPE = 0 //
	BS_RESULT_TYPE_BS_RESULT_SUCCESS BS_RESULT_TYPE = 1
	BS_RESULT_TYPE_BS_RESULT_FAILED  BS_RESULT_TYPE = 2
)

// Enum value maps for BS_RESULT_TYPE.
var (
	BS_RESULT_TYPE_name = map[int32]string{
		0: "BS_RESULT_NONE",
		1: "BS_RESULT_SUCCESS",
		2: "BS_RESULT_FAILED",
	}
	BS_RESULT_TYPE_value = map[string]int32{
		"BS_RESULT_NONE":    0,
		"BS_RESULT_SUCCESS": 1,
		"BS_RESULT_FAILED":  2,
	}
)

func (x BS_RESULT_TYPE) Enum() *BS_RESULT_TYPE {
	p := new(BS_RESULT_TYPE)
	*p = x
	return p
}

func (x BS_RESULT_TYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BS_RESULT_TYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_db_base_proto_enumTypes[1].Descriptor()
}

func (BS_RESULT_TYPE) Type() protoreflect.EnumType {
	return &file_db_base_proto_enumTypes[1]
}

func (x BS_RESULT_TYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BS_RESULT_TYPE.Descriptor instead.
func (BS_RESULT_TYPE) EnumDescriptor() ([]byte, []int) {
	return file_db_base_proto_rawDescGZIP(), []int{1}
}

var file_db_base_proto_extTypes = []protoimpl.ExtensionInfo{
	{
		ExtendedType:  (*descriptorpb.MessageOptions)(nil),
		ExtensionType: (*uint32)(nil),
		Field:         50000,
		Name:          "OptionTableId",
		Tag:           "varint,50000,opt,name=OptionTableId",
		Filename:      "db_base.dbproto",
	},
	{
		ExtendedType:  (*descriptorpb.MessageOptions)(nil),
		ExtensionType: (*string)(nil),
		Field:         50001,
		Name:          "OptionTableName",
		Tag:           "bytes,50001,opt,name=OptionTableName",
		Filename:      "db_base.dbproto",
	},
	{
		ExtendedType:  (*descriptorpb.MessageOptions)(nil),
		ExtensionType: (*string)(nil),
		Field:         50002,
		Name:          "OptionPrimaryKey",
		Tag:           "bytes,50002,opt,name=OptionPrimaryKey",
		Filename:      "db_base.dbproto",
	},
	{
		ExtendedType:  (*descriptorpb.MessageOptions)(nil),
		ExtensionType: (*string)(nil),
		Field:         50003,
		Name:          "OptionForeignKey",
		Tag:           "bytes,50003,opt,name=OptionForeignKey",
		Filename:      "db_base.dbproto",
	},
	{
		ExtendedType:  (*descriptorpb.MessageOptions)(nil),
		ExtensionType: (*string)(nil),
		Field:         50005,
		Name:          "OptionForeignReferences",
		Tag:           "bytes,50005,opt,name=OptionForeignReferences",
		Filename:      "db_base.dbproto",
	},
	{
		ExtendedType:  (*descriptorpb.MessageOptions)(nil),
		ExtensionType: (*string)(nil),
		Field:         50006,
		Name:          "OptionAutoIncrementKey",
		Tag:           "bytes,50006,opt,name=OptionAutoIncrementKey",
		Filename:      "db_base.dbproto",
	},
	{
		ExtendedType:  (*descriptorpb.MessageOptions)(nil),
		ExtensionType: (*string)(nil),
		Field:         50007,
		Name:          "OptionBackupTableName",
		Tag:           "bytes,50007,opt,name=OptionBackupTableName",
		Filename:      "db_base.dbproto",
	},
	{
		ExtendedType:  (*descriptorpb.MessageOptions)(nil),
		ExtensionType: (*bool)(nil),
		Field:         50008,
		Name:          "OptionLoadOnly",
		Tag:           "varint,50008,opt,name=OptionLoadOnly",
		Filename:      "db_base.dbproto",
	},
	{
		ExtendedType:  (*descriptorpb.MessageOptions)(nil),
		ExtensionType: (*string)(nil),
		Field:         50009,
		Name:          "OptionProcedureName",
		Tag:           "bytes,50009,opt,name=OptionProcedureName",
		Filename:      "db_base.dbproto",
	},
	{
		ExtendedType:  (*descriptorpb.MessageOptions)(nil),
		ExtensionType: (*string)(nil),
		Field:         50010,
		Name:          "OptionProcedureResult",
		Tag:           "bytes,50010,opt,name=OptionProcedureResult",
		Filename:      "db_base.dbproto",
	},
	{
		ExtendedType:  (*descriptorpb.MessageOptions)(nil),
		ExtensionType: (*string)(nil),
		Field:         50011,
		Name:          "OptionIndex",
		Tag:           "bytes,50011,opt,name=OptionIndex",
		Filename:      "db_base.dbproto",
	},
	{
		ExtendedType:  (*descriptorpb.MessageOptions)(nil),
		ExtensionType: (*string)(nil),
		Field:         50012,
		Name:          "OptionUniqueKey",
		Tag:           "bytes,50012,opt,name=OptionUniqueKey",
		Filename:      "db_base.dbproto",
	},
	{
		ExtendedType:  (*descriptorpb.FieldOptions)(nil),
		ExtensionType: (*uint32)(nil),
		Field:         60000,
		Name:          "OptionRepeatLimit",
		Tag:           "varint,60000,opt,name=OptionRepeatLimit",
		Filename:      "db_base.dbproto",
	},
	{
		ExtendedType:  (*descriptorpb.FieldOptions)(nil),
		ExtensionType: (*string)(nil),
		Field:         60001,
		Name:          "OptionDBFieldExtra",
		Tag:           "bytes,60001,opt,name=OptionDBFieldExtra",
		Filename:      "db_base.dbproto",
	},
	{
		ExtendedType:  (*descriptorpb.FieldOptions)(nil),
		ExtensionType: (*bool)(nil),
		Field:         60002,
		Name:          "OptionDBReadOnly",
		Tag:           "varint,60002,opt,name=OptionDBReadOnly",
		Filename:      "db_base.dbproto",
	},
	{
		ExtendedType:  (*descriptorpb.FieldOptions)(nil),
		ExtensionType: (*string)(nil),
		Field:         60003,
		Name:          "OptionDBNamePrefix",
		Tag:           "bytes,60003,opt,name=OptionDBNamePrefix",
		Filename:      "db_base.dbproto",
	},
	{
		ExtendedType:  (*descriptorpb.FieldOptions)(nil),
		ExtensionType: (*string)(nil),
		Field:         60004,
		Name:          "OptionDBLoadSql",
		Tag:           "bytes,60004,opt,name=OptionDBLoadSql",
		Filename:      "db_base.dbproto",
	},
	{
		ExtendedType:  (*descriptorpb.FieldOptions)(nil),
		ExtensionType: (*bool)(nil),
		Field:         60005,
		Name:          "OptionDBNeedEscape",
		Tag:           "varint,60005,opt,name=OptionDBNeedEscape",
		Filename:      "db_base.dbproto",
	},
	{
		ExtendedType:  (*descriptorpb.FieldOptions)(nil),
		ExtensionType: (*bool)(nil),
		Field:         60006,
		Name:          "OptionDBProcParam",
		Tag:           "varint,60006,opt,name=OptionDBProcParam",
		Filename:      "db_base.dbproto",
	},
	{
		ExtendedType:  (*descriptorpb.FieldOptions)(nil),
		ExtensionType: (*string)(nil),
		Field:         60007,
		Name:          "OptionOldName",
		Tag:           "bytes,60007,opt,name=OptionOldName",
		Filename:      "db_base.dbproto",
	},
	{
		ExtendedType:  (*descriptorpb.FieldOptions)(nil),
		ExtensionType: (*string)(nil),
		Field:         60008,
		Name:          "OptionTable",
		Tag:           "bytes,60008,opt,name=OptionTable",
		Filename:      "db_base.dbproto",
	},
	{
		ExtendedType:  (*descriptorpb.FieldOptions)(nil),
		ExtensionType: (*string)(nil),
		Field:         60009,
		Name:          "OptionBackUpTabel",
		Tag:           "bytes,60009,opt,name=OptionBackUpTabel",
		Filename:      "db_base.dbproto",
	},
}

// Extension fields to descriptorpb.MessageOptions.
var (
	// optional uint32 OptionTableId = 50000;
	E_OptionTableId = &file_db_base_proto_extTypes[0] //表ID
	// optional string OptionTableName = 50001;
	E_OptionTableName = &file_db_base_proto_extTypes[1] //表名
	// optional string OptionPrimaryKey = 50002;
	E_OptionPrimaryKey = &file_db_base_proto_extTypes[2] //主键
	// optional string OptionForeignKey = 50003;
	E_OptionForeignKey = &file_db_base_proto_extTypes[3] //外键
	// optional string OptionForeignReferences = 50005;
	E_OptionForeignReferences = &file_db_base_proto_extTypes[4] //外键的关联表
	// optional string OptionAutoIncrementKey = 50006;
	E_OptionAutoIncrementKey = &file_db_base_proto_extTypes[5] //自增长的Key
	// optional string OptionBackupTableName = 50007;
	E_OptionBackupTableName = &file_db_base_proto_extTypes[6] //备份表的名称
	// optional bool OptionLoadOnly = 50008;
	E_OptionLoadOnly = &file_db_base_proto_extTypes[7] //只用于数据加载
	// optional string OptionProcedureName = 50009;
	E_OptionProcedureName = &file_db_base_proto_extTypes[8] //存储过程名称
	// optional string OptionProcedureResult = 50010;
	E_OptionProcedureResult = &file_db_base_proto_extTypes[9] //存储过程返回结果的PB结构Name
	// optional string OptionIndex = 50011;
	E_OptionIndex = &file_db_base_proto_extTypes[10] //建立索引
	// optional string OptionUniqueKey = 50012;
	E_OptionUniqueKey = &file_db_base_proto_extTypes[11] //
)

// Extension fields to descriptorpb.FieldOptions.
var (
	// optional uint32 OptionRepeatLimit = 60000;
	E_OptionRepeatLimit = &file_db_base_proto_extTypes[12] // repeat 字段限制的个数
	// optional string OptionDBFieldExtra = 60001;
	E_OptionDBFieldExtra = &file_db_base_proto_extTypes[13] // 创建数据库要用到得额外信息，如果没有该属性表示非数据库字段
	// optional bool OptionDBReadOnly = 60002;
	E_OptionDBReadOnly = &file_db_base_proto_extTypes[14] // 该字段对DB是否只读
	// optional string OptionDBNamePrefix = 60003;
	E_OptionDBNamePrefix = &file_db_base_proto_extTypes[15] // 数据库名称前缀
	// optional string OptionDBLoadSql = 60004;
	E_OptionDBLoadSql = &file_db_base_proto_extTypes[16] // 数据加载SQL语句
	// optional bool OptionDBNeedEscape = 60005;
	E_OptionDBNeedEscape = &file_db_base_proto_extTypes[17] // 字段是否需要转义存储
	// optional bool OptionDBProcParam = 60006;
	E_OptionDBProcParam = &file_db_base_proto_extTypes[18] // 是否存储过程参数
	// optional string OptionOldName = 60007;
	E_OptionOldName = &file_db_base_proto_extTypes[19] //用来自动修改字段名
	// optional string OptionTable = 60008;
	E_OptionTable = &file_db_base_proto_extTypes[20] // 建表名称
	// optional string OptionBackUpTabel = 60009;
	E_OptionBackUpTabel = &file_db_base_proto_extTypes[21] //备份表
)

var File_db_base_proto protoreflect.FileDescriptor

var file_db_base_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x64, 0x62, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x10, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2a, 0xcf, 0x01, 0x0a, 0x0c, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x45, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x12, 0x10, 0x0a, 0x0c, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x45, 0x5f, 0x4e, 0x4f,
	0x4e, 0x45, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x45, 0x5f,
	0x49, 0x4e, 0x53, 0x45, 0x52, 0x54, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x4f, 0x50, 0x45, 0x52,
	0x41, 0x54, 0x45, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e,
	0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x45, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x03,
	0x12, 0x10, 0x0a, 0x0c, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x45, 0x5f, 0x4c, 0x4f, 0x41, 0x44,
	0x10, 0x04, 0x12, 0x18, 0x0a, 0x14, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x45, 0x5f, 0x44, 0x45,
	0x4c, 0x45, 0x54, 0x45, 0x5f, 0x43, 0x41, 0x43, 0x48, 0x45, 0x10, 0x05, 0x12, 0x13, 0x0a, 0x0f,
	0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x45, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x41, 0x43, 0x45, 0x10,
	0x06, 0x12, 0x15, 0x0a, 0x11, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x41, 0x4c,
	0x4c, 0x5f, 0x50, 0x52, 0x4f, 0x43, 0x10, 0x07, 0x12, 0x19, 0x0a, 0x15, 0x4f, 0x50, 0x45, 0x52,
	0x41, 0x54, 0x45, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x5f, 0x42, 0x41, 0x43, 0x4b, 0x55,
	0x50, 0x10, 0x08, 0x2a, 0x51, 0x0a, 0x0e, 0x42, 0x53, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x12, 0x12, 0x0a, 0x0e, 0x42, 0x53, 0x5f, 0x52, 0x45, 0x53, 0x55,
	0x4c, 0x54, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x42, 0x53, 0x5f,
	0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x01,
	0x12, 0x14, 0x0a, 0x10, 0x42, 0x53, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x46, 0x41,
	0x49, 0x4c, 0x45, 0x44, 0x10, 0x02, 0x3a, 0x4a, 0x0a, 0x0d, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0xd0, 0x86, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0d, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x88,
	0x01, 0x01, 0x3a, 0x4e, 0x0a, 0x0f, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0xd1, 0x86, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x88,
	0x01, 0x01, 0x3a, 0x50, 0x0a, 0x10, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x69, 0x6d,
	0x61, 0x72, 0x79, 0x4b, 0x65, 0x79, 0x12, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0xd2, 0x86, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x10, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x4b, 0x65,
	0x79, 0x88, 0x01, 0x01, 0x3a, 0x50, 0x0a, 0x10, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x6f,
	0x72, 0x65, 0x69, 0x67, 0x6e, 0x4b, 0x65, 0x79, 0x12, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0xd3, 0x86, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x10, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x6f, 0x72, 0x65, 0x69, 0x67, 0x6e,
	0x4b, 0x65, 0x79, 0x88, 0x01, 0x01, 0x3a, 0x5e, 0x0a, 0x17, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x46, 0x6f, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x73, 0x12, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0xd5, 0x86, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x46, 0x6f, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x73, 0x88, 0x01, 0x01, 0x3a, 0x5c, 0x0a, 0x16, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x41, 0x75, 0x74, 0x6f, 0x49, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4b, 0x65, 0x79,
	0x12, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0xd6, 0x86, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x41, 0x75, 0x74, 0x6f, 0x49, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4b, 0x65,
	0x79, 0x88, 0x01, 0x01, 0x3a, 0x5a, 0x0a, 0x15, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x61,
	0x63, 0x6b, 0x75, 0x70, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0xd7,
	0x86, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x61,
	0x63, 0x6b, 0x75, 0x70, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01,
	0x3a, 0x4c, 0x0a, 0x0e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x61, 0x64, 0x4f, 0x6e,
	0x6c, 0x79, 0x12, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0xd8, 0x86, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x61, 0x64, 0x4f, 0x6e, 0x6c, 0x79, 0x88, 0x01, 0x01, 0x3a, 0x56,
	0x0a, 0x13, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0xd9, 0x86, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x3a, 0x5a, 0x0a, 0x15, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x50, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12,
	0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0xda, 0x86, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x50, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x88,
	0x01, 0x01, 0x3a, 0x46, 0x0a, 0x0b, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x12, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0xdb, 0x86, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x88, 0x01, 0x01, 0x3a, 0x4e, 0x0a, 0x0f, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x1f, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0xdc,
	0x86, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x6e,
	0x69, 0x71, 0x75, 0x65, 0x4b, 0x65, 0x79, 0x88, 0x01, 0x01, 0x3a, 0x50, 0x0a, 0x11, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12,
	0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0xe0,
	0xd4, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x70, 0x65, 0x61, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x88, 0x01, 0x01, 0x3a, 0x52, 0x0a, 0x12,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x42, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x45, 0x78, 0x74,
	0x72, 0x61, 0x12, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0xe1, 0xd4, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x44, 0x42, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x45, 0x78, 0x74, 0x72, 0x61, 0x88, 0x01, 0x01,
	0x3a, 0x4e, 0x0a, 0x10, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x42, 0x52, 0x65, 0x61, 0x64,
	0x4f, 0x6e, 0x6c, 0x79, 0x12, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0xe2, 0xd4, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x44, 0x42, 0x52, 0x65, 0x61, 0x64, 0x4f, 0x6e, 0x6c, 0x79, 0x88, 0x01, 0x01,
	0x3a, 0x52, 0x0a, 0x12, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x42, 0x4e, 0x61, 0x6d, 0x65,
	0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0xe3, 0xd4, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x42, 0x4e, 0x61, 0x6d, 0x65, 0x50, 0x72, 0x65, 0x66, 0x69,
	0x78, 0x88, 0x01, 0x01, 0x3a, 0x4c, 0x0a, 0x0f, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x42,
	0x4c, 0x6f, 0x61, 0x64, 0x53, 0x71, 0x6c, 0x12, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0xe4, 0xd4, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x42, 0x4c, 0x6f, 0x61, 0x64, 0x53, 0x71, 0x6c, 0x88,
	0x01, 0x01, 0x3a, 0x52, 0x0a, 0x12, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x42, 0x4e, 0x65,
	0x65, 0x64, 0x45, 0x73, 0x63, 0x61, 0x70, 0x65, 0x12, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0xe5, 0xd4, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x12, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x42, 0x4e, 0x65, 0x65, 0x64, 0x45, 0x73, 0x63,
	0x61, 0x70, 0x65, 0x88, 0x01, 0x01, 0x3a, 0x50, 0x0a, 0x11, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x44, 0x42, 0x50, 0x72, 0x6f, 0x63, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x1d, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0xe6, 0xd4, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x11, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x42, 0x50, 0x72, 0x6f, 0x63,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x88, 0x01, 0x01, 0x3a, 0x48, 0x0a, 0x0d, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x4f, 0x6c, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0xe7, 0xd4, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x6c, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x88,
	0x01, 0x01, 0x3a, 0x44, 0x0a, 0x0b, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x12, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0xe8, 0xd4, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x3a, 0x50, 0x0a, 0x11, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x42, 0x61, 0x63, 0x6b, 0x55, 0x70, 0x54, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x1d, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0xe9, 0xd4, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x61, 0x63, 0x6b,
	0x55, 0x70, 0x54, 0x61, 0x62, 0x65, 0x6c, 0x88, 0x01, 0x01, 0x42, 0x0e, 0x48, 0x01, 0x5a, 0x0a,
	0x2e, 0x2f, 0x3b, 0x64, 0x62, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_db_base_proto_rawDescOnce sync.Once
	file_db_base_proto_rawDescData = file_db_base_proto_rawDesc
)

func file_db_base_proto_rawDescGZIP() []byte {
	file_db_base_proto_rawDescOnce.Do(func() {
		file_db_base_proto_rawDescData = protoimpl.X.CompressGZIP(file_db_base_proto_rawDescData)
	})
	return file_db_base_proto_rawDescData
}

var file_db_base_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_db_base_proto_goTypes = []interface{}{
	(OPERATE_TYPE)(0),                   // 0: OPERATE_TYPE
	(BS_RESULT_TYPE)(0),                 // 1: BS_RESULT_TYPE
	(*descriptorpb.MessageOptions)(nil), // 2: google.protobuf.MessageOptions
	(*descriptorpb.FieldOptions)(nil),   // 3: google.protobuf.FieldOptions
}
var file_db_base_proto_depIdxs = []int32{
	2,  // 0: OptionTableId:extendee -> google.protobuf.MessageOptions
	2,  // 1: OptionTableName:extendee -> google.protobuf.MessageOptions
	2,  // 2: OptionPrimaryKey:extendee -> google.protobuf.MessageOptions
	2,  // 3: OptionForeignKey:extendee -> google.protobuf.MessageOptions
	2,  // 4: OptionForeignReferences:extendee -> google.protobuf.MessageOptions
	2,  // 5: OptionAutoIncrementKey:extendee -> google.protobuf.MessageOptions
	2,  // 6: OptionBackupTableName:extendee -> google.protobuf.MessageOptions
	2,  // 7: OptionLoadOnly:extendee -> google.protobuf.MessageOptions
	2,  // 8: OptionProcedureName:extendee -> google.protobuf.MessageOptions
	2,  // 9: OptionProcedureResult:extendee -> google.protobuf.MessageOptions
	2,  // 10: OptionIndex:extendee -> google.protobuf.MessageOptions
	2,  // 11: OptionUniqueKey:extendee -> google.protobuf.MessageOptions
	3,  // 12: OptionRepeatLimit:extendee -> google.protobuf.FieldOptions
	3,  // 13: OptionDBFieldExtra:extendee -> google.protobuf.FieldOptions
	3,  // 14: OptionDBReadOnly:extendee -> google.protobuf.FieldOptions
	3,  // 15: OptionDBNamePrefix:extendee -> google.protobuf.FieldOptions
	3,  // 16: OptionDBLoadSql:extendee -> google.protobuf.FieldOptions
	3,  // 17: OptionDBNeedEscape:extendee -> google.protobuf.FieldOptions
	3,  // 18: OptionDBProcParam:extendee -> google.protobuf.FieldOptions
	3,  // 19: OptionOldName:extendee -> google.protobuf.FieldOptions
	3,  // 20: OptionTable:extendee -> google.protobuf.FieldOptions
	3,  // 21: OptionBackUpTabel:extendee -> google.protobuf.FieldOptions
	22, // [22:22] is the sub-list for method output_type
	22, // [22:22] is the sub-list for method input_type
	22, // [22:22] is the sub-list for extension type_name
	0,  // [0:22] is the sub-list for extension extendee
	0,  // [0:0] is the sub-list for field type_name
}

func init() { file_db_base_proto_init() }
func file_db_base_proto_init() {
	if File_db_base_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_db_base_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   0,
			NumExtensions: 22,
			NumServices:   0,
		},
		GoTypes:           file_db_base_proto_goTypes,
		DependencyIndexes: file_db_base_proto_depIdxs,
		EnumInfos:         file_db_base_proto_enumTypes,
		ExtensionInfos:    file_db_base_proto_extTypes,
	}.Build()
	File_db_base_proto = out.File
	file_db_base_proto_rawDesc = nil
	file_db_base_proto_goTypes = nil
	file_db_base_proto_depIdxs = nil
}
